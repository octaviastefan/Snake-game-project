#include <Arduino.h>
#include "LedControl.h"
#include <LiquidCrystal.h>

// Definirea pinilor
const byte rs = 5, en = 6, d4 = 7, d5 = 8, d6 = 9, d7 = 10;
const byte buzzerPin = 3, LCDbrightnessPin = 2, pinSW = 4, pinX = A0, pinY = A1;

// Crearea obiectelor pentru LCD și LedControl
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
LedControl lc(11, 13, 12, 1); // parametrii pentru MAX7219: DIN, CLK, CS

// Variabile pentru joc și meniu
byte score = 0;
byte snakeLength = 2;
int body[64][2], headRow = 0, headColumn = 1, directionRow = 0, directionColumn = 1;
int foodRow = 3, foodColumn = 3;
byte menuIndex = 0;
const String menuOptions[3] = {"Start Game", "Leaderboard", "Settings"};
bool gameStarted = false;
bool gameOver = false;
bool soundEnabled = true;

// Leaderboard
const int leaderboardSize = 5;
String playerNames[leaderboardSize] = {"Player 1", "Player 2", "Player 3", "Player 4", "Player 5"};
int playerScores[leaderboardSize] = {0, 0, 0, 0, 0};

const int minThreshold = 400;
const int maxThreshold = 600;

// funcții
void setup();
void loop();
void resetGame();
void playGame();
void moveSnake();
void generateFood();
void updateMatrixDisplay();
bool checkCollision(int row, int col);
void updateScoreOnLCD();
void handleJoystickInput();
void handleJoystickInGame();
void displayMenu();
void handleMenuNavigation();
void startGame();
void showLeaderboard();
void settingsMenu();
void playBuzzerTone(int frequency, int duration);
void endGame();
void updateLeaderboard();
void displayLeaderboard();
void showSmileyFace();
void showSadFace();

void setup() {
    pinMode(LCDbrightnessPin, OUTPUT);
    pinMode(pinSW, INPUT_PULLUP);
    pinMode(buzzerPin, OUTPUT);
    lcd.begin(16, 2);
    lc.shutdown(0, false);
    lc.setIntensity(0, 8);
    lc.clearDisplay(0);
    displayMenu();
}

void loop() {
    if (!gameStarted) {
        handleMenuNavigation();
    } else if (!gameOver) {
        handleJoystickInGame();
        playGame();
    } else {
        if (digitalRead(pinSW) == LOW) {
            gameStarted = false;
            gameOver = false;
            displayMenu();
            delay(500);
        }
    }
}

// Funcții pentru meniu
void displayMenu() {
    lcd.clear();
    lcd.print("  Snake Game");
    lcd.setCursor(0, 1);
    lcd.print("> ");
    lcd.print(menuOptions[menuIndex]);
}

void handleMenuNavigation() {
    static int lastYValue = analogRead(pinY);
    int yValue = analogRead(pinY);

    if (yValue < minThreshold && lastYValue >= minThreshold) {
        menuIndex = (menuIndex + 1) % 3;
        displayMenu();
        if (soundEnabled) playBuzzerTone(1000, 100);
    } else if (yValue > maxThreshold && lastYValue <= maxThreshold) {
        menuIndex = (menuIndex + 2) % 3;
        displayMenu();
        if (soundEnabled) playBuzzerTone(1000, 100);
    }
    lastYValue = yValue;

    if (digitalRead(pinSW) == LOW) {
        switch (menuIndex) {
            case 0:
                startGame();
                break;
            case 1:
                displayLeaderboard();
                break;
            case 2:
                settingsMenu();
                break;
        }
        delay(500);
    }
}

void startGame() {
    gameStarted = true;
    resetGame();
    lcd.clear();
    lcd.print("Game Started!");
    showSmileyFace();
    if (soundEnabled) playBuzzerTone(1000, 300);
}

void displayLeaderboard() {
    lcd.clear();
    lcd.print("Leaderboard:");
    delay(1000);

    for (int i = 0; i < leaderboardSize; i++) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print(playerNames[i]);
        lcd.setCursor(0, 1);
        lcd.print("Score: ");
        lcd.print(playerScores[i]);
        delay(1500);
    }

    displayMenu();
}

void settingsMenu() {
    lcd.clear();
    lcd.print("Settings");
    lcd.setCursor(0, 1);
    lcd.print("Sound: ");
    lcd.print(soundEnabled ? "ON" : "OFF");

    if (digitalRead(pinSW) == LOW) {
        soundEnabled = !soundEnabled;
        lcd.setCursor(7, 1);
        lcd.print(soundEnabled ? "ON " : "OFF");
        delay(500);
    }

    delay(2000);
    displayMenu();
}

void playBuzzerTone(int frequency, int duration) {
    tone(buzzerPin, frequency, duration);
    delay(duration);
    noTone(buzzerPin);
}

// Funcții pentru joc
void resetGame() {
    gameOver = false;
    memset(body, -1, sizeof(body));
    body[0][0] = 0; body[0][1] = 0;
    body[1][0] = 0; body[1][1] = 1;
    headRow = 0; headColumn = 1;
    snakeLength = 2;
    score = 0;
    generateFood();
    updateMatrixDisplay();
    updateScoreOnLCD();
}

void playGame() {
    static unsigned long lastUpdate = millis();
    if (millis() - lastUpdate > 500) {
        lastUpdate = millis();
        moveSnake();
        updateMatrixDisplay();
    }
}

void handleJoystickInGame() {
    int xValue = analogRead(pinX);
    int yValue = analogRead(pinY);

    if (yValue < minThreshold && directionRow == 0) {
        directionRow = -1;
        directionColumn = 0;
    } else if (yValue > maxThreshold && directionRow == 0) {
        directionRow = 1;
        directionColumn = 0;
    } else if (xValue < minThreshold && directionColumn == 0) {
        directionRow = 0;
        directionColumn = -1;
    } else if (xValue > maxThreshold && directionColumn == 0) {
        directionRow = 0;
        directionColumn = 1;
    }
}

void moveSnake() {
    int newHeadRow = headRow + directionRow;
    int newHeadColumn = headColumn + directionColumn;

    if (newHeadRow >= 8) newHeadRow = 0;
    else if (newHeadRow < 0) newHeadRow = 7;
    if (newHeadColumn >= 8) newHeadColumn = 0;
    else if (newHeadColumn < 0) newHeadColumn = 7;

    for (int i = 1; i < snakeLength; i++) {
        if (body[i][0] == newHeadRow && body[i][1] == newHeadColumn) {
            endGame();
            return;
        }
    }

    if (newHeadRow == foodRow && newHeadColumn == foodColumn) {
        score++;
        snakeLength++;
        updateScoreOnLCD();
        playBuzzerTone(1500, 200);
        generateFood();
    } else {
        for (int i = snakeLength - 1; i > 0; i--) {
            body[i][0] = body[i - 1][0];
            body[i][1] = body[i - 1][1];
        }
    }

    body[0][0] = newHeadRow;
    body[0][1] = newHeadColumn;
    headRow = newHeadRow;
    headColumn = newHeadColumn;
}

void generateFood() {
    do {
        foodRow = random(0, 8);
        foodColumn = random(0, 8);
    } while (checkCollision(foodRow, foodColumn));
}

bool checkCollision(int row, int col) {
    for (int i = 0; i < snakeLength; i++) {
        if (body[i][0] == row && body[i][1] == col) {
            return true;
        }
    }
    return false;
}

void updateMatrixDisplay() {
    lc.clearDisplay(0);
    for (int i = 0; i < snakeLength; i++) {
        lc.setLed(0, body[i][0], body[i][1], true);
    }
    lc.setLed(0, foodRow, foodColumn, true);
}

void updateScoreOnLCD() {
    lcd.setCursor(7, 1);
    lcd.print("     ");
    lcd.setCursor(7, 1);
    lcd.print(score);
}

void endGame() {
    gameOver = true;
    lcd.clear();
    lcd.print("  Game Over!");
    lcd.setCursor(0, 1);
    lcd.print("Score: ");
    lcd.print(score);
    showSadFace();
    updateLeaderboard();
    playBuzzerTone(500, 500);
}

void updateLeaderboard() {
    for (int i = leaderboardSize - 1; i >= 0; i--) {
        if (score > playerScores[i]) {
            if (i < leaderboardSize - 1) {
                playerScores[i + 1] = playerScores[i];
                playerNames[i + 1] = playerNames[i];
            }
            playerScores[i] = score;
            playerNames[i] = "Player " + String(i + 1);
        }
    }
}

void showSmileyFace() {
byte SMILE[8] = {0x3C, 0x42, 0xA5, 0x81, 0xA5, 0x99, 0x42, 0x3C};
  

    for (int i = 0; i < 8; i++) {
        lc.setRow(0, i, SMILE[i]);
    }
    delay(1000);
}

void showSadFace() {
    byte SAD[8] = {0x3C, 0x42, 0xA5, 0x81, 0x99, 0xA5, 0x42, 0x3C};


    for (int i = 0; i < 8; i++) {
        lc.setRow(0, i, SAD[i]);
    }
    delay(1000);
}
